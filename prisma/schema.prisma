// Prisma schema for Cyber Hub Survey System
// All comments in English only

  generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Survey {
  id          Int               @id @default(autoincrement())
  title_en    String
  title_ar    String
  created_by  Int
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  permanent_token String?       @unique // Permanent link token that never expires
  questions   SurveyQuestion[]
  invites     SurveyInvite[]
  responses   SurveyResponse[]
}

model SurveyQuestion {
  id         Int      @id @default(autoincrement())
  survey     Survey   @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  survey_id  Int
  question_type String // 'text', 'rating', 'choice', 'comments'
  label_en   String
  label_ar   String
  required   Boolean  @default(false)
  order      Int      @default(0)
  // Rating scale configuration
  rating_scale String? // 'satisfaction', 'expectations', 'reliability', 'clarity', 'agreement'
  rating_options Json? // Store rating options as JSON
  answers    SurveyAnswer[]
}

model SurveyInvite {
  id         Int      @id @default(autoincrement())
  survey     Survey   @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  survey_id  Int
  token      String   @unique
  expires_at DateTime
  used       Boolean  @default(false)
  invited_by Int
  created_at DateTime @default(now())
  used_at    DateTime?
  responses  SurveyResponse[]
}

model SurveyResponse {
  id                  Int            @id @default(autoincrement())
  invite              SurveyInvite?  @relation(fields: [invite_id], references: [id], onDelete: Cascade)
  invite_id           Int?
  survey              Survey         @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  survey_id           Int
  responder_name      String
  responder_department String
  submitted_at        DateTime       @default(now())
  answers             SurveyAnswer[]
}

model SurveyAnswer {
  id           Int            @id @default(autoincrement())
  response     SurveyResponse @relation(fields: [response_id], references: [id], onDelete: Cascade)
  response_id  Int
  question     SurveyQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id  Int
  answer       String?
  question_label String? // Store question text for better display
}

model Department {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  manager     Employee?  @relation("DepartmentManager", fields: [manager_id], references: [id])
  manager_id  Int?
  employees   Employee[]
}

model Employee {
  id           Int         @id @default(autoincrement())
  name         String
  name_ar      String?
  email        String     @unique
  phone        String?
  job_title    String?
  job_title_ar String?
  department   Department @relation(fields: [department_id], references: [id])
  department_id Int
  avatar       String?
  location     String?
  hire_date    DateTime?
  status       String?
  gender       String?    @default("male") // 'male', 'female'
  is_active    Boolean    @default(true)
  manages      Department[] @relation("DepartmentManager")
  // Shift Management relations
  shiftAssignments ShiftAssignment[]
  availability     MemberAvailability[]
  // Project Management relations
  projectAssignments TaskAssignment[]
  managedProjects  Project[] @relation("ProjectManager")
}

// Shift Management Models
model Shift {
  id          Int              @id @default(autoincrement())
  name        String           // 'morning', 'evening', 'night'
  name_ar     String           // 'صباح', 'مساء', 'ليل'
  start_time  String           // '08:00', '16:00', '00:00'
  end_time    String           // '16:00', '00:00', '08:00'
  min_members Int              @default(3)
  max_members Int              @default(5)
  assignments ShiftAssignment[]
}

model ShiftAssignment {
  id         Int      @id @default(autoincrement())
  date       DateTime // Date of the shift
  shift      Shift    @relation(fields: [shift_id], references: [id], onDelete: Cascade)
  shift_id   Int
  employee   Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int
  assigned_by Int     // Admin who assigned the shift
  assigned_at DateTime @default(now())
  status     String   @default("assigned") // 'assigned', 'completed', 'cancelled'
  
  @@unique([date, shift_id, employee_id]) // Prevent duplicate assignments
}

model MemberAvailability {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int
  date       DateTime // Date of unavailability
  reason     String   // 'sick_leave', 'vacation', 'personal', 'other'
  reason_ar  String   // Arabic reason
  notes      String?  // Additional notes
  created_by Int      // Admin who marked as unavailable
  created_at DateTime @default(now())
  
  @@unique([employee_id, date]) // Prevent duplicate availability records
}

model Policy {
  id          Int      @id @default(autoincrement())
  title_en    String
  title_ar    String
  description_en String
  description_ar String
  version     String
  file_size   String
  file_url    String?
  downloads   Int      @default(0)
  views       Int      @default(0)
  status      String   @default("active") // 'active', 'inactive', 'archived'
  is_visible  Boolean  @default(true)
  parent_id   Int?     // Reference to parent policy (for archived versions)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  Int?
  updated_by  Int?
  
  // Self-referencing relationship for archived versions
  parent      Policy?  @relation("PolicyVersions", fields: [parent_id], references: [id])
  archived_versions Policy[] @relation("PolicyVersions")
}

model Standard {
  id          Int      @id @default(autoincrement())
  title_en    String
  title_ar    String
  description_en String
  description_ar String
  version     String
  file_size   String
  file_url    String?
  downloads   Int      @default(0)
  views       Int      @default(0)
  status      String   @default("active") // 'active', 'inactive', 'archived'
  is_visible  Boolean  @default(true)
  parent_id   Int?     // Reference to parent standard (for archived versions)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  created_by  Int?
  updated_by  Int?
  
  // Self-referencing relationship for archived versions
  parent      Standard?  @relation("StandardVersions", fields: [parent_id], references: [id])
  archived_versions Standard[] @relation("StandardVersions")
}

model Procedure {
  id          Int      @id @default(autoincrement())
  title_en    String
  title_ar    String
  description String?
  file_path   String
  version     String   @default("1.0")
  is_visible  Boolean  @default(true)
  is_archived Boolean  @default(false)
  downloads   Int      @default(0)
  views       Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  versions    ProcedureVersion[]
}

model ProcedureVersion {
  id          Int       @id @default(autoincrement())
  procedure   Procedure @relation(fields: [procedure_id], references: [id], onDelete: Cascade)
  procedure_id Int
  version     String
  file_path   String
  created_at  DateTime  @default(now())
}

// Project Management Models
model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  start_date  DateTime
  end_date    DateTime
  status      String   @default("active") // active, completed, on_hold, cancelled
  priority    String   @default("medium") // low, medium, high, critical
  progress    Float    @default(0) // 0-100 percentage
  manager_id  Int?
  manager     Employee? @relation("ProjectManager", fields: [manager_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  phases      Phase[]
  tasks       Task[]
  imported_from_xml Boolean @default(false)
  xml_file_path String?
}

model Phase {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  start_date  DateTime
  end_date    DateTime
  status      String   @default("active") // active, completed, on_hold
  progress    Float    @default(0) // 0-100 percentage
  order       Int      @default(0)
  project     Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id  Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  tasks       Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  start_date  DateTime
  end_date    DateTime
  status      String   @default("active") // active, completed, on_hold, cancelled
  priority    String   @default("medium") // low, medium, high, critical
  progress    Float    @default(0) // 0-100 percentage
  order       Int      @default(0)
  project     Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id  Int
  phase       Phase?   @relation(fields: [phase_id], references: [id], onDelete: SetNull)
  phase_id    Int?
  parent_task Task?    @relation("TaskSubtasks", fields: [parent_task_id], references: [id], onDelete: SetNull)
  parent_task_id Int?
  subtasks    Task[]   @relation("TaskSubtasks")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  assignments TaskAssignment[]
  // Additional fields for Microsoft Project import
  duration    Float    @default(0) // Duration in hours
  work        Float    @default(0) // Work effort in hours
  cost        Float    @default(0) // Cost in currency
  xml_uid     String?  // Original UID from XML file for dependency mapping
  outline_level Int    @default(1) // Microsoft Project outline level
  // Dependencies
  predecessor_dependencies TaskDependency[] @relation("PredecessorTask")
  successor_dependencies   TaskDependency[] @relation("SuccessorTask")
}

model TaskAssignment {
  id          Int      @id @default(autoincrement())
  task        Task     @relation(fields: [task_id], references: [id], onDelete: Cascade)
  task_id     Int
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int
  role        String   @default("member") // owner, member, reviewer
  assigned_at DateTime @default(now())
  updated_at  DateTime @updatedAt
  // Additional fields for Microsoft Project import
  units       Float    @default(100) // Assignment units percentage
  work        Float    @default(0)   // Work effort in hours

  @@unique([task_id, employee_id])
}

// New model for task dependencies
model TaskDependency {
  id                    Int      @id @default(autoincrement())
  predecessor_task      Task     @relation("PredecessorTask", fields: [predecessor_task_id], references: [id], onDelete: Cascade)
  predecessor_task_id   Int
  successor_task        Task     @relation("SuccessorTask", fields: [successor_task_id], references: [id], onDelete: Cascade)
  successor_task_id     Int
  dependency_type       String   @default("finish_to_start") // finish_to_start, start_to_start, finish_to_finish, start_to_finish
  lag                   Float    @default(0) // Lag time in hours
  created_at            DateTime @default(now())

  @@unique([predecessor_task_id, successor_task_id])
} 