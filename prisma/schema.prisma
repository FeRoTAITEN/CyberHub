// Prisma schema for Cyber Hub Survey System
// All comments in English only

  generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Survey {
  id          Int               @id @default(autoincrement())
  title_en    String
  title_ar    String
  created_by  Int
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  permanent_token String?       @unique // Permanent link token that never expires
  questions   SurveyQuestion[]
  invites     SurveyInvite[]
  responses   SurveyResponse[]
}

model SurveyQuestion {
  id         Int      @id @default(autoincrement())
  survey     Survey   @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  survey_id  Int
  question_type String // 'text', 'rating', 'choice', 'comments'
  label_en   String
  label_ar   String
  required   Boolean  @default(false)
  order      Int      @default(0)
  // Rating scale configuration
  rating_scale String? // 'satisfaction', 'expectations', 'reliability', 'clarity', 'agreement'
  rating_options Json? // Store rating options as JSON
  answers    SurveyAnswer[]
}

model SurveyInvite {
  id         Int      @id @default(autoincrement())
  survey     Survey   @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  survey_id  Int
  token      String   @unique
  expires_at DateTime
  used       Boolean  @default(false)
  invited_by Int
  created_at DateTime @default(now())
  used_at    DateTime?
  responses  SurveyResponse[]
}

model SurveyResponse {
  id                  Int            @id @default(autoincrement())
  invite              SurveyInvite?  @relation(fields: [invite_id], references: [id], onDelete: Cascade)
  invite_id           Int?
  survey              Survey         @relation(fields: [survey_id], references: [id], onDelete: Cascade)
  survey_id           Int
  responder_name      String
  responder_department String
  submitted_at        DateTime       @default(now())
  answers             SurveyAnswer[]
}

model SurveyAnswer {
  id           Int            @id @default(autoincrement())
  response     SurveyResponse @relation(fields: [response_id], references: [id], onDelete: Cascade)
  response_id  Int
  question     SurveyQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)
  question_id  Int
  answer       String?
  question_label String? // Store question text for better display
}

model Department {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  manager     Employee?  @relation("DepartmentManager", fields: [manager_id], references: [id])
  manager_id  Int?
  employees   Employee[]
}

model Employee {
  id           Int         @id @default(autoincrement())
  name         String
  name_ar      String?
  email        String     @unique
  phone        String?
  job_title    String?
  job_title_ar String?
  department   Department @relation(fields: [department_id], references: [id])
  department_id Int
  avatar       String?
  location     String?
  hire_date    DateTime?
  status       String?
  gender       String?    @default("male") // 'male', 'female'
  is_active    Boolean    @default(true)
  manages      Department[] @relation("DepartmentManager")
  // Shift Management relations
  shiftAssignments ShiftAssignment[]
  availability     MemberAvailability[]
}

// Shift Management Models
model Shift {
  id          Int              @id @default(autoincrement())
  name        String           // 'morning', 'evening', 'night'
  name_ar     String           // 'صباح', 'مساء', 'ليل'
  start_time  String           // '08:00', '16:00', '00:00'
  end_time    String           // '16:00', '00:00', '08:00'
  min_members Int              @default(3)
  max_members Int              @default(5)
  assignments ShiftAssignment[]
}

model ShiftAssignment {
  id         Int      @id @default(autoincrement())
  date       DateTime // Date of the shift
  shift      Shift    @relation(fields: [shift_id], references: [id], onDelete: Cascade)
  shift_id   Int
  employee   Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int
  assigned_by Int     // Admin who assigned the shift
  assigned_at DateTime @default(now())
  status     String   @default("assigned") // 'assigned', 'completed', 'cancelled'
  
  @@unique([date, shift_id, employee_id]) // Prevent duplicate assignments
}

model MemberAvailability {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  employee_id Int
  date       DateTime // Date of unavailability
  reason     String   // 'sick_leave', 'vacation', 'personal', 'other'
  reason_ar  String   // Arabic reason
  notes      String?  // Additional notes
  created_by Int      // Admin who marked as unavailable
  created_at DateTime @default(now())
  
  @@unique([employee_id, date]) // Prevent duplicate availability records
} 